import os
import asyncio
import tempfile
from aiogram import Router, F
from aiogram.types import Message
from aiogram.enums import ChatType
from bot.transcriber import transcribe_audio

router = Router()

# –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–±–∞–π—Ç—ã). 19 –ú–ë ‚Äî –∑–∞–ø–∞—Å –ø–æ–¥ –ª–∏–º–∏—Ç Telegram.
MAX_FILE_SIZE = 19 * 1024 * 1024


async def _download_to_tempfile(message: Message, file_id: str, suffix: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å. –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤–µ–ª–∏–∫."""
    file_info = await message.bot.get_file(file_id)

    # —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤ –µ—Å—Ç—å file_size –≤ —Å–∞–º–æ–º –æ–±—ä–µ–∫—Ç–µ, –Ω–æ –Ω–∞–¥—ë–∂–Ω–µ–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å info
    if getattr(file_info, "file_size", None) and file_info.file_size > MAX_FILE_SIZE:
        raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ—Ç–æ–º")

    # —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    fd, temp_path = tempfile.mkstemp(suffix=suffix)
    os.close(fd)  # –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—É—Ç—å

    await message.bot.download_file(file_info.file_path, destination=temp_path)
    return temp_path


@router.message(F.voice)
async def handle_voice(message: Message):
    processing_msg = await message.answer("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å...")

    local_path = None
    try:
        local_path = await _download_to_tempfile(message, message.voice.file_id, suffix=".oga")
        # –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π ‚Äî –ª—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        text = await asyncio.to_thread(transcribe_audio, local_path, "ru")
        await processing_msg.delete()
        await message.answer(f"üó£ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n{text}")
    except ValueError as e:
        await processing_msg.delete()
        await message.answer(f"‚ö†Ô∏è {e}. –û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ.")
    except Exception as e:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –Ω–µ –ø–∞–¥–∞–µ–º –º–æ–ª—á–∞
        try:
            await processing_msg.delete()
        except Exception:
            pass
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
    finally:
        if local_path and os.path.exists(local_path):
            try:
                os.remove(local_path)
            except Exception:
                pass


# –í–∏–¥–µ–æ ‚Äî –¢–û–õ–¨–ö–û –≤ –ª–∏—á–∫–µ. –í –≥—Ä—É–ø–ø–∞—Ö –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
@router.message(
    (F.chat.type == ChatType.PRIVATE)
    & (F.video | (F.document & F.document.mime_type.startswith("video/")))
)
async def handle_video_private(message: Message):
    processing_msg = await message.answer("üéû –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

    # –±–µ—Ä—ë–º –æ–±—ä–µ–∫—Ç –≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞—Ä–∞–Ω–µ–µ
    file_obj = message.video or message.document
    if getattr(file_obj, "file_size", 0) > MAX_FILE_SIZE:
        await processing_msg.delete()
        await message.answer("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –¥–æ 19 –ú–ë –∏–ª–∏ —É–∫–æ—Ä–æ—Ç–∏ —Ä–æ–ª–∏–∫.")
        return

    local_path = None
    try:
        local_path = await _download_to_tempfile(message, file_obj.file_id, suffix=".mp4")
        # –¥–ª—è –≤–∏–¥–µ–æ ‚Äî –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞; –µ—Å–ª–∏ –Ω–µ ru, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ transcriber (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        text = await asyncio.to_thread(transcribe_audio, local_path, None)
        await processing_msg.delete()
        await message.answer(f"üó£ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏–∑ –≤–∏–¥–µ–æ:\n{text}")
    except ValueError as e:
        await processing_msg.delete()
        await message.answer(f"‚ö†Ô∏è {e}. –°–æ–∂–º–∏ –≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –∫–æ—Ä–æ—á–µ 19 –ú–ë.")
    except Exception as e:
        try:
            await processing_msg.delete()
        except Exception:
            pass
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
    finally:
        if local_path and os.path.exists(local_path):
            try:
                os.remove(local_path)
            except Exception:
                pass


def register_handlers(dispatcher):
    dispatcher.include_router(router)
