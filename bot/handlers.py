import os
import uuid
import asyncio
from aiogram import Router, F
from aiogram.types import Message
from aiogram.enums import ChatType
from bot.transcriber import transcribe_audio

router = Router()

# –ì–æ–ª–æ—Å–æ–≤—ã–µ ‚Äî –≤–µ–∑–¥–µ
@router.message(F.voice)
async def handle_voice(message: Message):
    file_info = await message.bot.get_file(message.voice.file_id)
    src_path = file_info.file_path
    local_path = f"{uuid.uuid4()}.oga"

    await message.bot.download_file(src_path, destination=local_path)
    processing_msg = await message.answer("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å...")

    # –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π ‚Äî –≤—ã—à–µ —Ç–æ—á–Ω–æ—Å—Ç—å
    text = await asyncio.to_thread(transcribe_audio, local_path, "ru")

    if os.path.exists(local_path):
        os.remove(local_path)

    await processing_msg.delete()
    await message.answer(f"üó£ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n{text}")

# –í–∏–¥–µ–æ ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–ò–ß–ö–ï (private). –í –≥—Ä—É–ø–ø–∞—Ö –∏–≥–Ω–æ—Ä–∏–º.
@router.message(
    (F.chat.type == ChatType.PRIVATE) &
    (F.video | (F.document & F.document.mime_type.startswith("video/")))
)
async def handle_video_private(message: Message):
    file = message.video or message.document
    file_info = await message.bot.get_file(file.file_id)
    src_path = file_info.file_path

    local_path = f"{uuid.uuid4()}.mp4"
    await message.bot.download_file(src_path, destination=local_path)

    processing_msg = await message.answer("üéû –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

    # –î–ª—è –≤–∏–¥–µ–æ ‚Äî –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
    text = await asyncio.to_thread(transcribe_audio, local_path, None)

    if os.path.exists(local_path):
        os.remove(local_path)

    await processing_msg.delete()
    await message.answer(f"üó£ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏–∑ –≤–∏–¥–µ–æ:\n{text}")

def register_handlers(dispatcher):
    dispatcher.include_router(router)
